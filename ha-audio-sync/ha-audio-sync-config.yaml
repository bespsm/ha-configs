esphome:
  name: sync-player
  friendly_name: ESP32-S3 T-Display
  platformio_options:
    board_build.f_flash: 80000000L
    board_build.partitions: default_16MB.csv
    board_build.arduino.memory_type: qio_opi

external_components:
  - source: github://landonr/lilygo-tdisplays3-esphome
    components: [tdisplays3]

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: arduino
  flash_size: 16MB

psram:
  mode: octal
  speed: 80MHz

logger:

api:
  on_client_connected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - lvgl.widget.show: lbl_wifi
  on_client_disconnected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - lvgl.widget.hide: lbl_wifi


ota:
  platform: esphome

wifi:
  ssid: "SSID-NAME"
  password: "WIFI-PASS"

globals:
 - id: edit_mode
   type: int
   restore_value: no
   initial_value: '0'
 - id: idle_timeout
   type: int
   restore_value: no
   initial_value: '45'

i2s_audio:
  - id: i2s_out
    i2s_lrclk_pin: GPIO13
    i2s_bclk_pin: GPIO02

media_player:
  - platform: i2s_audio
    id: local_player
    name: ESPHome I2S Media Player
    dac_type: external
    i2s_audio_id: i2s_out
    i2s_dout_pin: GPIO10
    mode: stereo

sensor:
  - platform: homeassistant
    id: media_player_volume
    entity_id: media_player.s3_esphome_i2s_media_player
    attribute: volume_level
    on_value:
      - lvgl.slider.update:
          id: slider_media_player
          value: !lambda return (x * 100);
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    id: wifi_signal_db
    update_interval: 20s
    entity_category: "diagnostic"
    on_value:
      - lvgl.label.update:
          id: lbl_wifi
          text: !lambda return std::string(std::to_string(int(x))+ " dB").c_str();

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
    id: Button1
    on_click:
    - min_length: 50ms
      max_length: 350ms
      then:
        - if:
            condition: lvgl.is_paused
            then:
              - logger.log: "LVGL resuming"
              - lvgl.resume:
              - lvgl.widget.redraw:
              - light.turn_on: display_backlight
        - if:
            condition:
              lambda: 'return id(edit_mode) == 1;'
            then:
              - media_player.volume_up:
                  id: local_player
            else:
              - lvgl.widget.focus: next
    - min_length: 400ms
      max_length: 2000ms
      then:
        - if:
            condition:
              lambda: 'return id(edit_mode) == 1;'
            then:
              - lambda: 'id(edit_mode) = 0;'
              - lvgl.widget.focus: next
            else:
              - lambda: 'id(edit_mode) = 1;'
              - lvgl.widget.focus:
                  id: slider_media_player
                  editing: true

  - platform: gpio
    pin:
      number: GPIO14
      inverted: true
    id: Button2
    on_click:
    - min_length: 50ms
      max_length: 350ms
      then:
        - if:
            condition: lvgl.is_paused
            then:
              - logger.log: "LVGL resuming"
              - lvgl.resume:
              - lvgl.widget.redraw:
              - light.turn_on: display_backlight


output:
  - platform: ledc
    pin: GPIO38
    id: gpio38
    frequency: 2000

light:
  - platform: monochromatic
    output: gpio38
    name: "Backlight"
    id: display_backlight
    restore_mode: RESTORE_DEFAULT_ON

# 170x320
display:
  - platform: tdisplays3
    id: disp
    auto_clear_enabled: false
    update_interval: 1s
    rotation: 270

lvgl:
  on_boot:
    - lvgl.resume:
    - lvgl.widget.redraw:
    - light.turn_on: display_backlight
  on_idle:
    timeout: !lambda "return (id(idle_timeout) * 1000);"
    then:
      - logger.log: "LVGL is idle"
      - light.turn_off: display_backlight
      - lvgl.pause:
  gradients:
  - id: color_bar
    direction: ver
    dither: none
    stops:
      - color: 0xa3a3a3
        position: 0
      - color: 0x3393a3
        position: 80
      - color: 0x0077a3
        position: 130
  theme:
    label:
      text_font: montserrat_14 # set all your labels to use your custom defined font
    button:
      bg_color: 0x2F8CD8
      opa: 70%
      bg_grad_color: 0x005782
      bg_grad_dir: VER
      border_color: 0x0077b3
      border_width: 5
      text_color: 0xFFFFFF
      pressed:
        bg_color: 0x006699
        bg_grad_color: 0x00334d
      checked:
        bg_color: 0x1d5f96
        bg_grad_color: 0x03324A
        text_color: 0xfff300
      focused:
        opa: 100%
    slider:
      border_width: 5
      opa: 70%
      bg_color: 0xcccaca
      border_color: 0x0077b3
      scroll_on_focus: true
      indicator:
        border_width: 5
        bg_color: 0x1d5f96
        border_color: 0x0077b3
        bg_grad_color: 0x03324A
        bg_grad_dir: VER
      knob:
        bg_color: 0x2F8CD8
        bg_grad_color: 0x005782
        bg_grad_dir: VER
        border_color: 0x0077b3
        border_width: 2
        text_color: 0xFFFFFF
      focused:
        opa: 100%
  style_definitions:
    - id: header_footer
      bg_color: 0x2F8CD8
      bg_grad_color: 0x005782
      bg_grad_dir: VER
      bg_opa: COVER
      border_opa: TRANSP
      radius: 0
      pad_all: 0
      pad_row: 0
      pad_column: 0
      border_color: 0x0077b3
      text_color: 0xFFFFFF
      width: 100%
      height: 30
  displays:
    - disp
  buffer_size: 25%
  keypads:
    - enter: Button2
  pages:
    - id: main_page
      widgets:
        - obj:
            align: TOP_MID
            styles: header_footer
            widgets:
              - label:
                  id: lbl_time
                  text: "Time"
                  align: CENTER
                  text_align: CENTER
                  text_color: 0xFFFFFF
              - label:
                  text: "dB"
                  id: lbl_wifi
                  hidden: true
                  align: top_right
                  x: -2
                  y: 7
                  text_align: right
                  text_color: 0xFFFFFF
        - obj: # a properly placed coontainer object for all these controls
            align: CENTER
            width: 320
            height: 150
            x: 0
            y: 20
            pad_all: 4
            pad_right: 6
            layout: # enable the FLEX layout for the children widgets
              type: FLEX
              flex_flow: COLUMN_WRAP
              flex_align_cross: SPACE_AROUND
              flex_align_main: SPACE_AROUND
              flex_align_track: SPACE_AROUND
            widgets:
              - button:
                    id: btn_media_player
                    align: LEFT_MID
                    width: 70
                    height: 100
                    checkable: true
                    widgets:
                      - label:
                          align: CENTER
                          text: "\uF04B"
                    on_click:
                      then:
                        - if:
                            condition:
                              media_player.is_playing:
                            then:
                              - media_player.stop
                            else:
                              - media_player.play_media: 'http://192.168.0.100:8000/stream'
              - slider:
                  id: slider_media_player
                  align: RIGHT_MID
                  width: 20
                  height: 100
                  min_value: 0
                  max_value: 100
                  adv_hittest: true
                  on_value:
                    - homeassistant.action:
                        action: media_player.volume_set
                        data:
                          entity_id: media_player.s3_esphome_i2s_media_player
                          volume_level: !lambda return (x / 100);
                  on_click:
                    then:
                      - if:
                          condition:
                            lambda: 'return id(edit_mode) == 0;'
                          then:
                            - lambda: 'id(edit_mode) = 1;'
                          else:
                            - media_player.volume_down:
                                id: local_player
                  on_long_press:
                    then:
                      - if:
                          condition:
                            lambda: 'return id(edit_mode) == 1;'
                          then:
                            - lambda: 'id(edit_mode) = 0;'
                            - lvgl.widget.focus: next

font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 75

time:
  - platform: homeassistant
    id: ha_time
    on_time_sync:
      - script.execute: time_update
    on_time:
      - minutes: '*'
        seconds: '*'
        then:
          - script.execute: time_update

script:
  - id: time_update
    then:
      - lvgl.label.update:
          id: lbl_time
          text: !lambda return id(ha_time).now().strftime("%H:%M:%S").c_str();
